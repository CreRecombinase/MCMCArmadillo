// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// em_with_zero_mean_c
arma::mat em_with_zero_mean_c(arma::mat y, int maxit);
RcppExport SEXP _MCMCArmadillo_em_with_zero_mean_c(SEXP ySEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(em_with_zero_mean_c(y, maxit));
    return rcpp_result_gen;
END_RCPP
}
// mvrnormArma
arma::mat mvrnormArma(int n, arma::vec mu, arma::mat Sigma);
RcppExport SEXP _MCMCArmadillo_mvrnormArma(SEXP nSEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma(n, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// dmvnrm_arma
double dmvnrm_arma(arma::rowvec x, arma::rowvec mean, arma::mat sigma, bool logd);
RcppExport SEXP _MCMCArmadillo_dmvnrm_arma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnrm_arma(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// get_sigmabeta_from_h_c
double get_sigmabeta_from_h_c(double h, arma::vec gam, arma::mat Sigma, arma::vec X, int T);
RcppExport SEXP _MCMCArmadillo_get_sigmabeta_from_h_c(SEXP hSEXP, SEXP gamSEXP, SEXP SigmaSEXP, SEXP XSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gam(gamSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(get_sigmabeta_from_h_c(h, gam, Sigma, X, T));
    return rcpp_result_gen;
END_RCPP
}
// get_h_from_sigmabeta_c
double get_h_from_sigmabeta_c(arma::vec X, double sigmabeta, arma::mat Sigma, arma::vec gam, int n, int T);
RcppExport SEXP _MCMCArmadillo_get_h_from_sigmabeta_c(SEXP XSEXP, SEXP sigmabetaSEXP, SEXP SigmaSEXP, SEXP gamSEXP, SEXP nSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type sigmabeta(sigmabetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gam(gamSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(get_h_from_sigmabeta_c(X, sigmabeta, Sigma, gam, n, T));
    return rcpp_result_gen;
END_RCPP
}
// get_target_c
arma::vec get_target_c(arma::vec X, arma::mat Y, double sigmabeta, arma::mat Sigma, arma::vec gam, arma::vec beta);
RcppExport SEXP _MCMCArmadillo_get_target_c(SEXP XSEXP, SEXP YSEXP, SEXP sigmabetaSEXP, SEXP SigmaSEXP, SEXP gamSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type sigmabeta(sigmabetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gam(gamSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_target_c(X, Y, sigmabeta, Sigma, gam, beta));
    return rcpp_result_gen;
END_RCPP
}
// sample_index
int sample_index(int size, NumericVector prob);
RcppExport SEXP _MCMCArmadillo_sample_index(SEXP sizeSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_index(size, prob));
    return rcpp_result_gen;
END_RCPP
}
// update_gamma_c
Rcpp::List update_gamma_c(arma::vec X, arma::mat Y, arma::vec gam);
RcppExport SEXP _MCMCArmadillo_update_gamma_c(SEXP XSEXP, SEXP YSEXP, SEXP gamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gam(gamSEXP);
    rcpp_result_gen = Rcpp::wrap(update_gamma_c(X, Y, gam));
    return rcpp_result_gen;
END_RCPP
}
// betagam_accept_c
arma::vec betagam_accept_c(arma::vec X, arma::mat Y, double sigmabeta1, arma::mat inputSigma, double Vbeta, arma::vec gam1, arma::vec beta1, arma::vec gam2, arma::vec beta2, int changeind, int change);
RcppExport SEXP _MCMCArmadillo_betagam_accept_c(SEXP XSEXP, SEXP YSEXP, SEXP sigmabeta1SEXP, SEXP inputSigmaSEXP, SEXP VbetaSEXP, SEXP gam1SEXP, SEXP beta1SEXP, SEXP gam2SEXP, SEXP beta2SEXP, SEXP changeindSEXP, SEXP changeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type sigmabeta1(sigmabeta1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inputSigma(inputSigmaSEXP);
    Rcpp::traits::input_parameter< double >::type Vbeta(VbetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gam1(gam1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gam2(gam2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< int >::type changeind(changeindSEXP);
    Rcpp::traits::input_parameter< int >::type change(changeSEXP);
    rcpp_result_gen = Rcpp::wrap(betagam_accept_c(X, Y, sigmabeta1, inputSigma, Vbeta, gam1, beta1, gam2, beta2, changeind, change));
    return rcpp_result_gen;
END_RCPP
}
// update_betagam_c
Rcpp::List update_betagam_c(arma::vec X, arma::mat Y, arma::vec gam1, arma::vec beta1, arma::mat Sigma, double sigmabeta, double Vbeta, int bgiter);
RcppExport SEXP _MCMCArmadillo_update_betagam_c(SEXP XSEXP, SEXP YSEXP, SEXP gam1SEXP, SEXP beta1SEXP, SEXP SigmaSEXP, SEXP sigmabetaSEXP, SEXP VbetaSEXP, SEXP bgiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gam1(gam1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< double >::type sigmabeta(sigmabetaSEXP);
    Rcpp::traits::input_parameter< double >::type Vbeta(VbetaSEXP);
    Rcpp::traits::input_parameter< int >::type bgiter(bgiterSEXP);
    rcpp_result_gen = Rcpp::wrap(update_betagam_c(X, Y, gam1, beta1, Sigma, sigmabeta, Vbeta, bgiter));
    return rcpp_result_gen;
END_RCPP
}
// update_h_c
Rcpp::List update_h_c(double initialh, int hiter, arma::vec gam, arma::vec beta, arma::mat Sig, arma::vec X, int T);
RcppExport SEXP _MCMCArmadillo_update_h_c(SEXP initialhSEXP, SEXP hiterSEXP, SEXP gamSEXP, SEXP betaSEXP, SEXP SigSEXP, SEXP XSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type initialh(initialhSEXP);
    Rcpp::traits::input_parameter< int >::type hiter(hiterSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gam(gamSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(update_h_c(initialh, hiter, gam, beta, Sig, X, T));
    return rcpp_result_gen;
END_RCPP
}
// rinvwish_c
arma::cube rinvwish_c(int n, int v, arma::mat S);
RcppExport SEXP _MCMCArmadillo_rinvwish_c(SEXP nSEXP, SEXP vSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(rinvwish_c(n, v, S));
    return rcpp_result_gen;
END_RCPP
}
// update_Sigma_c
arma::mat update_Sigma_c(int n, int nu, arma::vec X, arma::vec beta, arma::mat Phi, arma::mat Y);
RcppExport SEXP _MCMCArmadillo_update_Sigma_c(SEXP nSEXP, SEXP nuSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP PhiSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(update_Sigma_c(n, nu, X, beta, Phi, Y));
    return rcpp_result_gen;
END_RCPP
}
// update_gamma_sw_c
Rcpp::List update_gamma_sw_c(arma::vec X, arma::mat Y, arma::vec gam, arma::rowvec marcor);
RcppExport SEXP _MCMCArmadillo_update_gamma_sw_c(SEXP XSEXP, SEXP YSEXP, SEXP gamSEXP, SEXP marcorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gam(gamSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type marcor(marcorSEXP);
    rcpp_result_gen = Rcpp::wrap(update_gamma_sw_c(X, Y, gam, marcor));
    return rcpp_result_gen;
END_RCPP
}
// betagam_accept_sw_c
arma::vec betagam_accept_sw_c(arma::vec X, arma::mat Y, double sigmabeta1, arma::mat inputSigma, double Vbeta, arma::vec gam1, arma::vec beta1, arma::vec gam2, arma::vec beta2, int changeind, int change);
RcppExport SEXP _MCMCArmadillo_betagam_accept_sw_c(SEXP XSEXP, SEXP YSEXP, SEXP sigmabeta1SEXP, SEXP inputSigmaSEXP, SEXP VbetaSEXP, SEXP gam1SEXP, SEXP beta1SEXP, SEXP gam2SEXP, SEXP beta2SEXP, SEXP changeindSEXP, SEXP changeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type sigmabeta1(sigmabeta1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inputSigma(inputSigmaSEXP);
    Rcpp::traits::input_parameter< double >::type Vbeta(VbetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gam1(gam1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gam2(gam2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< int >::type changeind(changeindSEXP);
    Rcpp::traits::input_parameter< int >::type change(changeSEXP);
    rcpp_result_gen = Rcpp::wrap(betagam_accept_sw_c(X, Y, sigmabeta1, inputSigma, Vbeta, gam1, beta1, gam2, beta2, changeind, change));
    return rcpp_result_gen;
END_RCPP
}
// update_betagam_sw_c
Rcpp::List update_betagam_sw_c(arma::vec X, arma::mat Y, arma::vec gam1, arma::vec beta1, arma::mat Sigma, arma::rowvec marcor, double sigmabeta, double Vbeta, int bgiter, int smallworlditer);
RcppExport SEXP _MCMCArmadillo_update_betagam_sw_c(SEXP XSEXP, SEXP YSEXP, SEXP gam1SEXP, SEXP beta1SEXP, SEXP SigmaSEXP, SEXP marcorSEXP, SEXP sigmabetaSEXP, SEXP VbetaSEXP, SEXP bgiterSEXP, SEXP smallworlditerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gam1(gam1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type marcor(marcorSEXP);
    Rcpp::traits::input_parameter< double >::type sigmabeta(sigmabetaSEXP);
    Rcpp::traits::input_parameter< double >::type Vbeta(VbetaSEXP);
    Rcpp::traits::input_parameter< int >::type bgiter(bgiterSEXP);
    Rcpp::traits::input_parameter< int >::type smallworlditer(smallworlditerSEXP);
    rcpp_result_gen = Rcpp::wrap(update_betagam_sw_c(X, Y, gam1, beta1, Sigma, marcor, sigmabeta, Vbeta, bgiter, smallworlditer));
    return rcpp_result_gen;
END_RCPP
}
// doMCMC_c
Rcpp::List doMCMC_c(arma::vec X, arma::mat Y, int n, int T, arma::mat Phi, int nu, arma::vec initialbeta, arma::vec initialgamma, arma::mat initialSigma, double initialsigmabeta, arma::rowvec marcor, double Vbeta, int niter, int bgiter, int hiter, int switer);
RcppExport SEXP _MCMCArmadillo_doMCMC_c(SEXP XSEXP, SEXP YSEXP, SEXP nSEXP, SEXP TSEXP, SEXP PhiSEXP, SEXP nuSEXP, SEXP initialbetaSEXP, SEXP initialgammaSEXP, SEXP initialSigmaSEXP, SEXP initialsigmabetaSEXP, SEXP marcorSEXP, SEXP VbetaSEXP, SEXP niterSEXP, SEXP bgiterSEXP, SEXP hiterSEXP, SEXP switerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< int >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initialbeta(initialbetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initialgamma(initialgammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type initialSigma(initialSigmaSEXP);
    Rcpp::traits::input_parameter< double >::type initialsigmabeta(initialsigmabetaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type marcor(marcorSEXP);
    Rcpp::traits::input_parameter< double >::type Vbeta(VbetaSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type bgiter(bgiterSEXP);
    Rcpp::traits::input_parameter< int >::type hiter(hiterSEXP);
    Rcpp::traits::input_parameter< int >::type switer(switerSEXP);
    rcpp_result_gen = Rcpp::wrap(doMCMC_c(X, Y, n, T, Phi, nu, initialbeta, initialgamma, initialSigma, initialsigmabeta, marcor, Vbeta, niter, bgiter, hiter, switer));
    return rcpp_result_gen;
END_RCPP
}
// run2chains_c
Rcpp::List run2chains_c(arma::vec X, arma::mat Y, Rcpp::List initial_chain1, Rcpp::List initial_chain2, arma::mat Phi, int niter, int bgiter, int hiter, int switer, int burnin);
RcppExport SEXP _MCMCArmadillo_run2chains_c(SEXP XSEXP, SEXP YSEXP, SEXP initial_chain1SEXP, SEXP initial_chain2SEXP, SEXP PhiSEXP, SEXP niterSEXP, SEXP bgiterSEXP, SEXP hiterSEXP, SEXP switerSEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type initial_chain1(initial_chain1SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type initial_chain2(initial_chain2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type bgiter(bgiterSEXP);
    Rcpp::traits::input_parameter< int >::type hiter(hiterSEXP);
    Rcpp::traits::input_parameter< int >::type switer(switerSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(run2chains_c(X, Y, initial_chain1, initial_chain2, Phi, niter, bgiter, hiter, switer, burnin));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MCMCArmadillo_em_with_zero_mean_c", (DL_FUNC) &_MCMCArmadillo_em_with_zero_mean_c, 2},
    {"_MCMCArmadillo_mvrnormArma", (DL_FUNC) &_MCMCArmadillo_mvrnormArma, 3},
    {"_MCMCArmadillo_dmvnrm_arma", (DL_FUNC) &_MCMCArmadillo_dmvnrm_arma, 4},
    {"_MCMCArmadillo_get_sigmabeta_from_h_c", (DL_FUNC) &_MCMCArmadillo_get_sigmabeta_from_h_c, 5},
    {"_MCMCArmadillo_get_h_from_sigmabeta_c", (DL_FUNC) &_MCMCArmadillo_get_h_from_sigmabeta_c, 6},
    {"_MCMCArmadillo_get_target_c", (DL_FUNC) &_MCMCArmadillo_get_target_c, 6},
    {"_MCMCArmadillo_sample_index", (DL_FUNC) &_MCMCArmadillo_sample_index, 2},
    {"_MCMCArmadillo_update_gamma_c", (DL_FUNC) &_MCMCArmadillo_update_gamma_c, 3},
    {"_MCMCArmadillo_betagam_accept_c", (DL_FUNC) &_MCMCArmadillo_betagam_accept_c, 11},
    {"_MCMCArmadillo_update_betagam_c", (DL_FUNC) &_MCMCArmadillo_update_betagam_c, 8},
    {"_MCMCArmadillo_update_h_c", (DL_FUNC) &_MCMCArmadillo_update_h_c, 7},
    {"_MCMCArmadillo_rinvwish_c", (DL_FUNC) &_MCMCArmadillo_rinvwish_c, 3},
    {"_MCMCArmadillo_update_Sigma_c", (DL_FUNC) &_MCMCArmadillo_update_Sigma_c, 6},
    {"_MCMCArmadillo_update_gamma_sw_c", (DL_FUNC) &_MCMCArmadillo_update_gamma_sw_c, 4},
    {"_MCMCArmadillo_betagam_accept_sw_c", (DL_FUNC) &_MCMCArmadillo_betagam_accept_sw_c, 11},
    {"_MCMCArmadillo_update_betagam_sw_c", (DL_FUNC) &_MCMCArmadillo_update_betagam_sw_c, 10},
    {"_MCMCArmadillo_doMCMC_c", (DL_FUNC) &_MCMCArmadillo_doMCMC_c, 16},
    {"_MCMCArmadillo_run2chains_c", (DL_FUNC) &_MCMCArmadillo_run2chains_c, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_MCMCArmadillo(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
